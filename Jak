
import discord
from discord.ext import commands
import time
import platform
import random
import asyncio
import io
import datetime
from discord import ui
from discord import app_commands, utils


class Client(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=commands.when_mentioned_or('/'), intents=discord.Intents().all())
client = Client()
#client = commands.Bot(command_prefix="/", intents=discord.Intents.all())


@client.tree.command(name="hello", description="hello")
async def hello(ctx: discord.Interaction):
    await ctx.send("Hello I am Jak 2.0! Now Gluten Free! Please check with our manager for the diabetic friendly version.")



@client.tree.command(name="shutdown", description="shut down the bot, hes being wild again")
async def shutdown(interaction: discord.Interaction):
    await interaction.response.send_message(content="Shutting Jak down hes a bit too wild currently")
    await client.close()


# embed for user info sorta? Can use work for the messages please dont get lazy idiot
# uinfo
@client.tree.command(name="userinfo", description="Get info on a user")
async def userinfo(interaction: discord.Interaction, member: discord.Member = None):
    if member == None:
        member = interaction.user
    roles = [role for role in member.roles]
    embed = discord.Embed(title="User info", description=f"Some info on the user {member.mention}", color=discord.Color.green(), timestamp=datetime.datetime.utcnow())
    embed.set_thumbnail(url=member.avatar.url)
    embed.add_field(name="Name", value=f"{member.name}#{member.discriminator}")
    embed.add_field(name="Nickname", value=member.display_name)
    embed.add_field(name="Created At", value=member.created_at.strftime("%a, %B, %#d, %Y, %I:%M %p "))
    embed.add_field(name="Joined At", value=member.joined_at.strftime("%a, %B, %#d, %Y, %I:%M %p "))
    embed.add_field(name=f"Roles ({len(roles)})", value=" ".join([role.mention for role in roles]))
    embed.add_field(name="Top Roled", value=member.top_role.mention)
    embed.add_field(name="Messages", value="0")  # For now come back later! its forever stuck at 0 atm
    embed.add_field(name="Bot?", value=member.bot)
    # add more fields or modify as needed!
    await interaction.response.send_message(embed=embed)

# Server Info sorta? #sinfo
@client.tree.command(name="serverinfo", description="Get info on the server")
async def serverinfo(interaction: discord.Interaction):
    embed = discord.Embed(title="Server info", description=f"Here's some info on the server, {ctx.guild.name}",color=discord.Color.green(), timestamp=intertaciton.message.created_at)
    embed.set_thumbnail(url=interaction.guild.icon.url)
    embed.add_field(name="Members", value=intertaciton.guild.member_count)
    embed.add_field(name="Channel Count",value=f"{len(intertaciton.guild.text_channels)} text | {len(intertaciton.guild.voice_channels)} voice")
    embed.add_field(name="Owner", value=intertaciton.guild.owner.mention)
    embed.add_field(name="Description", value=intertaciton.guild.description)
    embed.add_field(name="Created At", value=intertaciton.guild.created_at.strftime("%a, %B, %#d, %Y, %I:%M %p "))
    # Add more fields or modify the embed if needed!
    await interaction.response.send_message(embed=embed)

@client.tree.command(name="math", description="Gives math problems")
async def math(interaction: discord.Interaction, expression: str):
    symbols = ['+', '-', '/', '*', '%']
    if any(s in expression for s in symbols):
        calculated = eval(expression)
        embed = discord.Embed(title="Math Question", description=f"`Question`{expression}\n`Answer`{calculated}", color=discord.Color.green(), timestamp=datetime.datetime.utcnow())
    else:
        await interaction.response.send_message("This isn't a math problem idiot!")
    await interaction.response.send_message(embed=embed)


@client.tree.command(name="dice", description="Roll a dice")
async def roll(interaction: discord.Interaction, *, max: int = 6):  # int=6 because its the normal face value of dice
    number = random.randint(1, max)  # !roll to use it
    await interaction.response.send_message(number)


@client.tree.command(name="choose", description="Choose between multiple options")
async def choose(interaction: discord.Interaction, arg1: str, arg2: str, arg3: str):
    arguments = [arg1, arg2, arg3]
    choice = random.choice(arguments)
    # Send an initial response to the interaction
    await interaction.response.send_message("🕐 Thinking... Give Jak a moment")
    await asyncio.sleep(0.2)
    # Retrieve the message that was just sent
    thinking_message = await interaction.original_response()
    for i in range(6):
        # Edit the message with the new content
        await thinking_message.edit(content=f"🕐 Thinking... Give Jak a moment")
        await asyncio.sleep(0.2)
    # Follow-up with the actual choice after the edit loop
    await interaction.followup.send(choice)


@client.tree.command(name="guess", description="Guess a number")
async def guess(interaction: discord.Interaction, max:int=10):
    MAX_GUESSES = 5
    number = random.randint(1, max)
    await interaction.response.send_message(f"Guessing game has started!\nPlease guess a number between **1-{max}**\nYou have **{MAX_GUESSES}** guesses")
    def check(m):
        return m.author == interaction.user and m.channel == interaction.channel #checks message I guess idk I googled it and still dont fully grasp it?
    for i in range(MAX_GUESSES):
        guess = await client.wait_for('message', check=check)
        try:
            int(guess.content)
            if guess.content == str(number):
                await interaction.channel.send(f'You got the number right, it took you **{i}** tries!')
            elif guess.content >= str(number):
                await interaction.channel.send(f"Lower!")
            elif guess.content <= str(number):
                await interaction.channel.send(f'Higher!')
        except:
            await interaction.channel.send("Please send a number next time!")
    else:
         await interaction.channel.send("Game over... You have ran out of tries!")



#__________________________________________________________________________________
#for coinflip with buttons! no wages here idiot
async def heads_or_tails(interaction, choice):
  computer_choice = random.choice(["heads", "tails"])
  if computer_choice == choice:
      await interaction.response.send_message(content=f"You chose correctly! It was {computer_choice}")
  else:
      await interaction.response.send_message(content=f"You chose incorrectly! It was {computer_choice}")

class Cf(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="heads", style=discord.ButtonStyle.green, custom_id="1")
    async def heads(self, interaction: discord.Interaction, button: discord.ui.Button):
       await heads_or_tails(interaction,"heads")
    @discord.ui.button(label="tails", style=discord.ButtonStyle.red, custom_id="2")
    async def tails(self, interaction: discord.Interaction, button: discord.ui.Button):
       await heads_or_tails(interaction, "tails")

@client.tree.command(name="cf", description="heads or tails?")
async def cf(interaction: discord.Interaction):
    await interaction.response.send_message(content="heads or tails?", view=Cf())

#WIP role select
class SelectMenu(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Movie Night", value="movie_night", emoji="🎥", description="Ping for movie nights!"),
            discord.SelectOption(label="Class", value="class", emoji="🏫", description="Ping for classes!"),
            discord.SelectOption(label="NSFW", value="nsfw", emoji="😈", description="Access to NSFW content!"),
        ]
        super().__init__(
            placeholder="What roles do you want?",
            options=options,
            min_values=1,
            max_values=3
        )

    async def callback(self, interaction: discord.Interaction):
        user = interaction.user
        guild = interaction.guild

        for selected_value in self.values:
            role_name = None
            role_color = None

            if selected_value == "movie_night":
                role_name = "Movie Night"
                role_color = discord.Color.blurple()
            elif selected_value == "class":
                role_name = "Class"
                role_color = discord.Color.green()
            elif selected_value == "nsfw":
                role_name = "NSFW"
                role_color = discord.Color.red()
            else:
                continue  # Invalid selection

            existing_role = discord.utils.get(guild.roles, name=role_name)
            if existing_role is not None:
                if existing_role in user.roles:
                    await user.remove_roles(existing_role)
                else:
                    await user.add_roles(existing_role)
            else:
                new_role = await guild.create_role(name=role_name, color=role_color, hoist=False)
                await user.add_roles(new_role)

        await interaction.response.send_message(f"Roles updated for {user.mention}",ephemeral=True)


class Select(discord.ui.View):
    def __init__(self, timeout=30):
        super().__init__(timeout=timeout)
        self.add_item(SelectMenu())

class Role(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

@client.tree.command(name="select", description="Select your roles")
async def select(interaction: discord.Interaction):
    await interaction.response.send_message(content="Select your roles", view=Select(), ephemeral=True)






#ticket___________________________________________________________________
async def get_or_create_private_channel(guild, user):
    channel_name = f"ticket-{user.name}"
    # Check if the channel already exists
    existing_channel = discord.utils.get(guild.text_channels, name=channel_name)
    if existing_channel:
        return existing_channel
    else:
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True)
        }
        text_channel = await guild.create_text_channel(channel_name, overwrites=overwrites)

        # Create voice channel
        voice_channel = await guild.create_voice_channel(channel_name, overwrites=overwrites)

        return text_channel, voice_channel


async def close_ticket(text_channel, voice_channel, interaction):
    user = interaction.user
    # Check if the user has permission to close the ticket
    text_permissions = text_channel.overwrites_for(user)
    if text_permissions.read_messages:
        await text_channel.delete()
        await voice_channel.delete()
        await interaction.response.send_message(f"Ticket channels have been closed.", ephemeral=True)
    else:
        await interaction.response.send_message("You do not have permission to close this ticket.", ephemeral=True)


class ReportModal(discord.ui.Modal, title="Ticket"):
    user_name = discord.ui.TextInput(label="User's Discord Name", placeholder="eg. JohnDoe#0000", required=True,
                                     max_length=100, style=discord.TextStyle.short)
    datetime = discord.ui.TextInput(label="Enter Date", placeholder="May 1st, 2024", required=True, max_length=100,
                                    style=discord.TextStyle.short)
    description = discord.ui.TextInput(label="Type your response here!",
                                       placeholder="eg. Aleko I would like to talk you about... Or I have a suggestion for the server!",
                                       required=True, max_length=4000, style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            f"{interaction.user.mention} Your ticket has been created! Aleko will see it soon :)", ephemeral=True)

        channel = discord.utils.get(interaction.guild.text_channels, name="support")
        user = interaction.user

        text_channel, voice_channel = await get_or_create_private_channel(interaction.guild, user)
        await text_channel.send(
            f"Ticket Submitted by {user.mention} \n Name: {self.user_name} \n Date: {self.datetime} \n Description: {self.description}")


@client.tree.command(name="ticket", description="Create a ticket!")
async def ticket(interaction: discord.Interaction):
    await interaction.response.send_modal(ReportModal())


@client.tree.command(name="close", description="Close your ticket channels!")
async def close(interaction: discord.Interaction):
    user = interaction.user
    text_channel = discord.utils.get(interaction.guild.text_channels, name=f"ticket-{user.name}")
    voice_channel = discord.utils.get(interaction.guild.voice_channels, name=f"ticket-{user.name}")
    if text_channel and voice_channel:
        await close_ticket(text_channel, voice_channel, interaction)
    else:
        await interaction.response.send_message("You do not have an open ticket.", ephemeral=True)






 #how to make buttons for future use lol dont delete this lmao
   # @discord.ui.button(label="test", style=discord.ButtonStyle.blurple)
    #async def test(self, interaction: discord.Interaction, button: discord.ui.Button):
       #await interaction.channel.send(content="Fuck you!")
       #client.tree.command(name="test")
#async def test(interaction: discord.Interaction):
    #await interaction.response.send_message(content="This message has a button on it!", view=testButtons())
    #how to make buttons for future use lol dont delete this lmao
#__________________________________________________________________

#for buttons to stay forever for like a verification I might do
#class PersistentViewBot(commands.Bot):
    #def __init__(self):
        #intents = discord.Intents().all()
        #super().__init__(command_prefix=commands.when_mentioned_or('.'), intents=intents)
    #async def setup_hook(self) -> None:
       # self.add_view(Cf()) #thanks google
        #self.add_view()4

#client = PersistentViewBot()
# #How to make buttons stay 140 to 149 line of code for future use when I make a verify button for bot filter


















# ______________________________________________________________


#-----------tetris----------------------------------------------------------------------




# work on storing it on a server once you have bot more stable, gil doesnt really save after the bot gets turned off.

